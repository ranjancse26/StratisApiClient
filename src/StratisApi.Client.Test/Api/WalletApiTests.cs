/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing WalletApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WalletApiTests
    {
        private WalletApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WalletApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WalletApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WalletApi
            //Assert.IsInstanceOfType(typeof(WalletApi), instance, "instance is a WalletApi");
        }

        
        /// <summary>
        /// Test BuildTransaction
        /// </summary>
        [Test]
        public void BuildTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BuildTransactionRequest request = null;
            //instance.BuildTransaction(request);
            
        }
        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletCreationRequest request = null;
            //instance.Create(request);
            
        }
        
        /// <summary>
        /// Test CreateNewAccount
        /// </summary>
        [Test]
        public void CreateNewAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetUnusedAccountModel request = null;
            //instance.CreateNewAccount(request);
            
        }
        
        /// <summary>
        /// Test GenerateMnemonic
        /// </summary>
        [Test]
        public void GenerateMnemonicTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //int? wordCount = null;
            //instance.GenerateMnemonic(language, wordCount);
            
        }
        
        /// <summary>
        /// Test GetAllAddresses
        /// </summary>
        [Test]
        public void GetAllAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //instance.GetAllAddresses(walletName, accountName);
            
        }
        
        /// <summary>
        /// Test GetBalance
        /// </summary>
        [Test]
        public void GetBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //instance.GetBalance(walletName, accountName);
            
        }
        
        /// <summary>
        /// Test GetExtPubKey
        /// </summary>
        [Test]
        public void GetExtPubKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //instance.GetExtPubKey(walletName, accountName);
            
        }
        
        /// <summary>
        /// Test GetGeneralInfo
        /// </summary>
        [Test]
        public void GetGeneralInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.GetGeneralInfo(name);
            
        }
        
        /// <summary>
        /// Test GetHistory
        /// </summary>
        [Test]
        public void GetHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //string address = null;
            //int? skip = null;
            //int? take = null;
            //string searchQuery = null;
            //instance.GetHistory(walletName, accountName, address, skip, take, searchQuery);
            
        }
        
        /// <summary>
        /// Test GetMaximumSpendableBalance
        /// </summary>
        [Test]
        public void GetMaximumSpendableBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string feeType = null;
            //string accountName = null;
            //bool? allowUnconfirmed = null;
            //instance.GetMaximumSpendableBalance(walletName, feeType, accountName, allowUnconfirmed);
            
        }
        
        /// <summary>
        /// Test GetReceivedByAddress
        /// </summary>
        [Test]
        public void GetReceivedByAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //instance.GetReceivedByAddress(address);
            
        }
        
        /// <summary>
        /// Test GetSpendableTransactions
        /// </summary>
        [Test]
        public void GetSpendableTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //int? minConfirmations = null;
            //instance.GetSpendableTransactions(walletName, accountName, minConfirmations);
            
        }
        
        /// <summary>
        /// Test GetTransactionFeeEstimate
        /// </summary>
        [Test]
        public void GetTransactionFeeEstimateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TxFeeEstimateRequest request = null;
            //instance.GetTransactionFeeEstimate(request);
            
        }
        
        /// <summary>
        /// Test GetUnusedAddress
        /// </summary>
        [Test]
        public void GetUnusedAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //instance.GetUnusedAddress(walletName, accountName);
            
        }
        
        /// <summary>
        /// Test GetUnusedAddresses
        /// </summary>
        [Test]
        public void GetUnusedAddressesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string count = null;
            //string accountName = null;
            //instance.GetUnusedAddresses(walletName, count, accountName);
            
        }
        
        /// <summary>
        /// Test ListAccounts
        /// </summary>
        [Test]
        public void ListAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //instance.ListAccounts(walletName);
            
        }
        
        /// <summary>
        /// Test ListWalletsFiles
        /// </summary>
        [Test]
        public void ListWalletsFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.ListWalletsFiles();
            
        }
        
        /// <summary>
        /// Test Load
        /// </summary>
        [Test]
        public void LoadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletLoadRequest request = null;
            //instance.Load(request);
            
        }
        
        /// <summary>
        /// Test Recover
        /// </summary>
        [Test]
        public void RecoverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletRecoveryRequest request = null;
            //instance.Recover(request);
            
        }
        
        /// <summary>
        /// Test RecoverViaExtPubKey
        /// </summary>
        [Test]
        public void RecoverViaExtPubKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletExtPubRecoveryRequest request = null;
            //instance.RecoverViaExtPubKey(request);
            
        }
        
        /// <summary>
        /// Test RemoveTransactions
        /// </summary>
        [Test]
        public void RemoveTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //List<string> ids = null;
            //DateTime? fromDate = null;
            //bool? all = null;
            //bool? reSync = null;
            //instance.RemoveTransactions(walletName, ids, fromDate, all, reSync);
            
        }
        
        /// <summary>
        /// Test SendTransaction
        /// </summary>
        [Test]
        public void SendTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SendTransactionRequest request = null;
            //instance.SendTransaction(request);
            
        }
        
        /// <summary>
        /// Test SignMessage
        /// </summary>
        [Test]
        public void SignMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SignMessageRequest request = null;
            //instance.SignMessage(request);
            
        }
        
        /// <summary>
        /// Test SplitCoins
        /// </summary>
        [Test]
        public void SplitCoinsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SplitCoinsRequest request = null;
            //instance.SplitCoins(request);
            
        }
        
        /// <summary>
        /// Test Sync
        /// </summary>
        [Test]
        public void SyncTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HashModel model = null;
            //instance.Sync(model);
            
        }
        
        /// <summary>
        /// Test SyncFromDate
        /// </summary>
        [Test]
        public void SyncFromDateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletSyncFromDateRequest request = null;
            //instance.SyncFromDate(request);
            
        }
        
        /// <summary>
        /// Test VerifyMessage
        /// </summary>
        [Test]
        public void VerifyMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //VerifyRequest request = null;
            //instance.VerifyMessage(request);
            
        }
        
        /// <summary>
        /// Test WalletStats
        /// </summary>
        [Test]
        public void WalletStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string walletName = null;
            //string accountName = null;
            //int? minConfirmations = null;
            //bool? verbose = null;
            //instance.WalletStats(walletName, accountName, minConfirmations, verbose);
            
        }
        
    }

}
