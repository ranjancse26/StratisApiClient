/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SetBanPeerViewModel
    /// </summary>
    [DataContract]
    public partial class SetBanPeerViewModel :  IEquatable<SetBanPeerViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetBanPeerViewModel" /> class.
        /// </summary>
        /// <param name="banCommand">banCommand.</param>
        /// <param name="banDurationSeconds">banDurationSeconds.</param>
        /// <param name="peerAddress">peerAddress.</param>
        public SetBanPeerViewModel(string banCommand = default(string), int? banDurationSeconds = default(int?), string peerAddress = default(string))
        {
            this.BanCommand = banCommand;
            this.BanDurationSeconds = banDurationSeconds;
            this.PeerAddress = peerAddress;
        }
        
        /// <summary>
        /// Gets or Sets BanCommand
        /// </summary>
        [DataMember(Name="banCommand", EmitDefaultValue=false)]
        public string BanCommand { get; set; }

        /// <summary>
        /// Gets or Sets BanDurationSeconds
        /// </summary>
        [DataMember(Name="banDurationSeconds", EmitDefaultValue=false)]
        public int? BanDurationSeconds { get; set; }

        /// <summary>
        /// Gets or Sets PeerAddress
        /// </summary>
        [DataMember(Name="peerAddress", EmitDefaultValue=false)]
        public string PeerAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetBanPeerViewModel {\n");
            sb.Append("  BanCommand: ").Append(BanCommand).Append("\n");
            sb.Append("  BanDurationSeconds: ").Append(BanDurationSeconds).Append("\n");
            sb.Append("  PeerAddress: ").Append(PeerAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetBanPeerViewModel);
        }

        /// <summary>
        /// Returns true if SetBanPeerViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of SetBanPeerViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetBanPeerViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BanCommand == input.BanCommand ||
                    (this.BanCommand != null &&
                    this.BanCommand.Equals(input.BanCommand))
                ) && 
                (
                    this.BanDurationSeconds == input.BanDurationSeconds ||
                    (this.BanDurationSeconds != null &&
                    this.BanDurationSeconds.Equals(input.BanDurationSeconds))
                ) && 
                (
                    this.PeerAddress == input.PeerAddress ||
                    (this.PeerAddress != null &&
                    this.PeerAddress.Equals(input.PeerAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BanCommand != null)
                    hashCode = hashCode * 59 + this.BanCommand.GetHashCode();
                if (this.BanDurationSeconds != null)
                    hashCode = hashCode * 59 + this.BanDurationSeconds.GetHashCode();
                if (this.PeerAddress != null)
                    hashCode = hashCode * 59 + this.PeerAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
