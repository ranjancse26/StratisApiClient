/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LocalCallContractRequest
    /// </summary>
    [DataContract]
    public partial class LocalCallContractRequest :  IEquatable<LocalCallContractRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalCallContractRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalCallContractRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalCallContractRequest" /> class.
        /// </summary>
        /// <param name="contractAddress">contractAddress (required).</param>
        /// <param name="methodName">methodName (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="gasPrice">gasPrice.</param>
        /// <param name="gasLimit">gasLimit.</param>
        /// <param name="sender">sender.</param>
        /// <param name="parameters">parameters.</param>
        public LocalCallContractRequest(string contractAddress = default(string), string methodName = default(string), string amount = default(string), long? gasPrice = default(long?), long? gasLimit = default(long?), string sender = default(string), List<string> parameters = default(List<string>))
        {
            // to ensure "contractAddress" is required (not null)
            if (contractAddress == null)
            {
                throw new InvalidDataException("contractAddress is a required property for LocalCallContractRequest and cannot be null");
            }
            else
            {
                this.ContractAddress = contractAddress;
            }
            // to ensure "methodName" is required (not null)
            if (methodName == null)
            {
                throw new InvalidDataException("methodName is a required property for LocalCallContractRequest and cannot be null");
            }
            else
            {
                this.MethodName = methodName;
            }
            this.Amount = amount;
            this.GasPrice = gasPrice;
            this.GasLimit = gasLimit;
            this.Sender = sender;
            this.Parameters = parameters;
        }
        
        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name="contractAddress", EmitDefaultValue=false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets MethodName
        /// </summary>
        [DataMember(Name="methodName", EmitDefaultValue=false)]
        public string MethodName { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets GasPrice
        /// </summary>
        [DataMember(Name="gasPrice", EmitDefaultValue=false)]
        public long? GasPrice { get; set; }

        /// <summary>
        /// Gets or Sets GasLimit
        /// </summary>
        [DataMember(Name="gasLimit", EmitDefaultValue=false)]
        public long? GasLimit { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public List<string> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalCallContractRequest {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  MethodName: ").Append(MethodName).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  GasLimit: ").Append(GasLimit).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalCallContractRequest);
        }

        /// <summary>
        /// Returns true if LocalCallContractRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalCallContractRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalCallContractRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.MethodName == input.MethodName ||
                    (this.MethodName != null &&
                    this.MethodName.Equals(input.MethodName))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.GasPrice == input.GasPrice ||
                    (this.GasPrice != null &&
                    this.GasPrice.Equals(input.GasPrice))
                ) && 
                (
                    this.GasLimit == input.GasLimit ||
                    (this.GasLimit != null &&
                    this.GasLimit.Equals(input.GasLimit))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractAddress != null)
                    hashCode = hashCode * 59 + this.ContractAddress.GetHashCode();
                if (this.MethodName != null)
                    hashCode = hashCode * 59 + this.MethodName.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.GasPrice != null)
                    hashCode = hashCode * 59 + this.GasPrice.GetHashCode();
                if (this.GasLimit != null)
                    hashCode = hashCode * 59 + this.GasLimit.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GasPrice (long?) maximum
            if(this.GasPrice > (long?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasPrice, must be a value less than or equal to 10000.", new [] { "GasPrice" });
            }

            // GasPrice (long?) minimum
            if(this.GasPrice < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasPrice, must be a value greater than or equal to 1.", new [] { "GasPrice" });
            }

            // GasLimit (long?) maximum
            if(this.GasLimit > (long?)100000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasLimit, must be a value less than or equal to 100000.", new [] { "GasLimit" });
            }

            // GasLimit (long?) minimum
            if(this.GasLimit < (long?)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GasLimit, must be a value greater than or equal to 10000.", new [] { "GasLimit" });
            }

            yield break;
        }
    }

}
