/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetUnusedAccountModel
    /// </summary>
    [DataContract]
    public partial class GetUnusedAccountModel :  IEquatable<GetUnusedAccountModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUnusedAccountModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUnusedAccountModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUnusedAccountModel" /> class.
        /// </summary>
        /// <param name="walletName">walletName (required).</param>
        /// <param name="password">password (required).</param>
        public GetUnusedAccountModel(string walletName = default(string), string password = default(string))
        {
            // to ensure "walletName" is required (not null)
            if (walletName == null)
            {
                throw new InvalidDataException("walletName is a required property for GetUnusedAccountModel and cannot be null");
            }
            else
            {
                this.WalletName = walletName;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for GetUnusedAccountModel and cannot be null");
            }
            else
            {
                this.Password = password;
            }
        }
        
        /// <summary>
        /// Gets or Sets WalletName
        /// </summary>
        [DataMember(Name="walletName", EmitDefaultValue=false)]
        public string WalletName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUnusedAccountModel {\n");
            sb.Append("  WalletName: ").Append(WalletName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUnusedAccountModel);
        }

        /// <summary>
        /// Returns true if GetUnusedAccountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUnusedAccountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUnusedAccountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WalletName == input.WalletName ||
                    (this.WalletName != null &&
                    this.WalletName.Equals(input.WalletName))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WalletName != null)
                    hashCode = hashCode * 59 + this.WalletName.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
