/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SplitCoinsRequest
    /// </summary>
    [DataContract]
    public partial class SplitCoinsRequest :  IEquatable<SplitCoinsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitCoinsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplitCoinsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplitCoinsRequest" /> class.
        /// </summary>
        /// <param name="walletName">walletName (required).</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="walletPassword">walletPassword (required).</param>
        /// <param name="totalAmountToSplit">totalAmountToSplit (required).</param>
        /// <param name="utxosCount">utxosCount (required).</param>
        public SplitCoinsRequest(string walletName = default(string), string accountName = default(string), string walletPassword = default(string), string totalAmountToSplit = default(string), int? utxosCount = default(int?))
        {
            // to ensure "walletName" is required (not null)
            if (walletName == null)
            {
                throw new InvalidDataException("walletName is a required property for SplitCoinsRequest and cannot be null");
            }
            else
            {
                this.WalletName = walletName;
            }
            // to ensure "walletPassword" is required (not null)
            if (walletPassword == null)
            {
                throw new InvalidDataException("walletPassword is a required property for SplitCoinsRequest and cannot be null");
            }
            else
            {
                this.WalletPassword = walletPassword;
            }
            // to ensure "totalAmountToSplit" is required (not null)
            if (totalAmountToSplit == null)
            {
                throw new InvalidDataException("totalAmountToSplit is a required property for SplitCoinsRequest and cannot be null");
            }
            else
            {
                this.TotalAmountToSplit = totalAmountToSplit;
            }
            // to ensure "utxosCount" is required (not null)
            if (utxosCount == null)
            {
                throw new InvalidDataException("utxosCount is a required property for SplitCoinsRequest and cannot be null");
            }
            else
            {
                this.UtxosCount = utxosCount;
            }
            this.AccountName = accountName;
        }
        
        /// <summary>
        /// Gets or Sets WalletName
        /// </summary>
        [DataMember(Name="walletName", EmitDefaultValue=false)]
        public string WalletName { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets WalletPassword
        /// </summary>
        [DataMember(Name="walletPassword", EmitDefaultValue=false)]
        public string WalletPassword { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmountToSplit
        /// </summary>
        [DataMember(Name="totalAmountToSplit", EmitDefaultValue=false)]
        public string TotalAmountToSplit { get; set; }

        /// <summary>
        /// Gets or Sets UtxosCount
        /// </summary>
        [DataMember(Name="utxosCount", EmitDefaultValue=false)]
        public int? UtxosCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SplitCoinsRequest {\n");
            sb.Append("  WalletName: ").Append(WalletName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  WalletPassword: ").Append(WalletPassword).Append("\n");
            sb.Append("  TotalAmountToSplit: ").Append(TotalAmountToSplit).Append("\n");
            sb.Append("  UtxosCount: ").Append(UtxosCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplitCoinsRequest);
        }

        /// <summary>
        /// Returns true if SplitCoinsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SplitCoinsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplitCoinsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WalletName == input.WalletName ||
                    (this.WalletName != null &&
                    this.WalletName.Equals(input.WalletName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.WalletPassword == input.WalletPassword ||
                    (this.WalletPassword != null &&
                    this.WalletPassword.Equals(input.WalletPassword))
                ) && 
                (
                    this.TotalAmountToSplit == input.TotalAmountToSplit ||
                    (this.TotalAmountToSplit != null &&
                    this.TotalAmountToSplit.Equals(input.TotalAmountToSplit))
                ) && 
                (
                    this.UtxosCount == input.UtxosCount ||
                    (this.UtxosCount != null &&
                    this.UtxosCount.Equals(input.UtxosCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WalletName != null)
                    hashCode = hashCode * 59 + this.WalletName.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.WalletPassword != null)
                    hashCode = hashCode * 59 + this.WalletPassword.GetHashCode();
                if (this.TotalAmountToSplit != null)
                    hashCode = hashCode * 59 + this.TotalAmountToSplit.GetHashCode();
                if (this.UtxosCount != null)
                    hashCode = hashCode * 59 + this.UtxosCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
