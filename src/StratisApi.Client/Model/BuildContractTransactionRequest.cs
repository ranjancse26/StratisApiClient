/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BuildContractTransactionRequest
    /// </summary>
    [DataContract]
    public partial class BuildContractTransactionRequest :  IEquatable<BuildContractTransactionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildContractTransactionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BuildContractTransactionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildContractTransactionRequest" /> class.
        /// </summary>
        /// <param name="sender">sender (required).</param>
        /// <param name="feeAmount">feeAmount.</param>
        /// <param name="password">password (required).</param>
        /// <param name="walletName">walletName (required).</param>
        /// <param name="accountName">accountName.</param>
        /// <param name="outpoints">outpoints.</param>
        /// <param name="recipients">recipients (required).</param>
        /// <param name="opReturnData">opReturnData.</param>
        /// <param name="opReturnAmount">opReturnAmount.</param>
        /// <param name="feeType">feeType.</param>
        /// <param name="allowUnconfirmed">allowUnconfirmed.</param>
        /// <param name="shuffleOutputs">shuffleOutputs.</param>
        /// <param name="changeAddress">changeAddress.</param>
        public BuildContractTransactionRequest(string sender = default(string), string feeAmount = default(string), string password = default(string), string walletName = default(string), string accountName = default(string), List<OutpointRequest> outpoints = default(List<OutpointRequest>), List<RecipientModel> recipients = default(List<RecipientModel>), string opReturnData = default(string), string opReturnAmount = default(string), string feeType = default(string), bool? allowUnconfirmed = default(bool?), bool? shuffleOutputs = default(bool?), string changeAddress = default(string))
        {
            // to ensure "sender" is required (not null)
            if (sender == null)
            {
                throw new InvalidDataException("sender is a required property for BuildContractTransactionRequest and cannot be null");
            }
            else
            {
                this.Sender = sender;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for BuildContractTransactionRequest and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "walletName" is required (not null)
            if (walletName == null)
            {
                throw new InvalidDataException("walletName is a required property for BuildContractTransactionRequest and cannot be null");
            }
            else
            {
                this.WalletName = walletName;
            }
            // to ensure "recipients" is required (not null)
            if (recipients == null)
            {
                throw new InvalidDataException("recipients is a required property for BuildContractTransactionRequest and cannot be null");
            }
            else
            {
                this.Recipients = recipients;
            }
            this.FeeAmount = feeAmount;
            this.AccountName = accountName;
            this.Outpoints = outpoints;
            this.OpReturnData = opReturnData;
            this.OpReturnAmount = opReturnAmount;
            this.FeeType = feeType;
            this.AllowUnconfirmed = allowUnconfirmed;
            this.ShuffleOutputs = shuffleOutputs;
            this.ChangeAddress = changeAddress;
        }
        
        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmount
        /// </summary>
        [DataMember(Name="feeAmount", EmitDefaultValue=false)]
        public string FeeAmount { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets WalletName
        /// </summary>
        [DataMember(Name="walletName", EmitDefaultValue=false)]
        public string WalletName { get; set; }

        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets Outpoints
        /// </summary>
        [DataMember(Name="outpoints", EmitDefaultValue=false)]
        public List<OutpointRequest> Outpoints { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name="recipients", EmitDefaultValue=false)]
        public List<RecipientModel> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets OpReturnData
        /// </summary>
        [DataMember(Name="opReturnData", EmitDefaultValue=false)]
        public string OpReturnData { get; set; }

        /// <summary>
        /// Gets or Sets OpReturnAmount
        /// </summary>
        [DataMember(Name="opReturnAmount", EmitDefaultValue=false)]
        public string OpReturnAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public string FeeType { get; set; }

        /// <summary>
        /// Gets or Sets AllowUnconfirmed
        /// </summary>
        [DataMember(Name="allowUnconfirmed", EmitDefaultValue=false)]
        public bool? AllowUnconfirmed { get; set; }

        /// <summary>
        /// Gets or Sets ShuffleOutputs
        /// </summary>
        [DataMember(Name="shuffleOutputs", EmitDefaultValue=false)]
        public bool? ShuffleOutputs { get; set; }

        /// <summary>
        /// Gets or Sets ChangeAddress
        /// </summary>
        [DataMember(Name="changeAddress", EmitDefaultValue=false)]
        public string ChangeAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildContractTransactionRequest {\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  FeeAmount: ").Append(FeeAmount).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  WalletName: ").Append(WalletName).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  Outpoints: ").Append(Outpoints).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  OpReturnData: ").Append(OpReturnData).Append("\n");
            sb.Append("  OpReturnAmount: ").Append(OpReturnAmount).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  AllowUnconfirmed: ").Append(AllowUnconfirmed).Append("\n");
            sb.Append("  ShuffleOutputs: ").Append(ShuffleOutputs).Append("\n");
            sb.Append("  ChangeAddress: ").Append(ChangeAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildContractTransactionRequest);
        }

        /// <summary>
        /// Returns true if BuildContractTransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildContractTransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildContractTransactionRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.FeeAmount == input.FeeAmount ||
                    (this.FeeAmount != null &&
                    this.FeeAmount.Equals(input.FeeAmount))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.WalletName == input.WalletName ||
                    (this.WalletName != null &&
                    this.WalletName.Equals(input.WalletName))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.Outpoints == input.Outpoints ||
                    this.Outpoints != null &&
                    this.Outpoints.SequenceEqual(input.Outpoints)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.OpReturnData == input.OpReturnData ||
                    (this.OpReturnData != null &&
                    this.OpReturnData.Equals(input.OpReturnData))
                ) && 
                (
                    this.OpReturnAmount == input.OpReturnAmount ||
                    (this.OpReturnAmount != null &&
                    this.OpReturnAmount.Equals(input.OpReturnAmount))
                ) && 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.AllowUnconfirmed == input.AllowUnconfirmed ||
                    (this.AllowUnconfirmed != null &&
                    this.AllowUnconfirmed.Equals(input.AllowUnconfirmed))
                ) && 
                (
                    this.ShuffleOutputs == input.ShuffleOutputs ||
                    (this.ShuffleOutputs != null &&
                    this.ShuffleOutputs.Equals(input.ShuffleOutputs))
                ) && 
                (
                    this.ChangeAddress == input.ChangeAddress ||
                    (this.ChangeAddress != null &&
                    this.ChangeAddress.Equals(input.ChangeAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.FeeAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmount.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.WalletName != null)
                    hashCode = hashCode * 59 + this.WalletName.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.Outpoints != null)
                    hashCode = hashCode * 59 + this.Outpoints.GetHashCode();
                if (this.Recipients != null)
                    hashCode = hashCode * 59 + this.Recipients.GetHashCode();
                if (this.OpReturnData != null)
                    hashCode = hashCode * 59 + this.OpReturnData.GetHashCode();
                if (this.OpReturnAmount != null)
                    hashCode = hashCode * 59 + this.OpReturnAmount.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.AllowUnconfirmed != null)
                    hashCode = hashCode * 59 + this.AllowUnconfirmed.GetHashCode();
                if (this.ShuffleOutputs != null)
                    hashCode = hashCode * 59 + this.ShuffleOutputs.GetHashCode();
                if (this.ChangeAddress != null)
                    hashCode = hashCode * 59 + this.ChangeAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
