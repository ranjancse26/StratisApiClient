/* 
 * Stratis Node API
 *
 * Access to the Stratis Node's core features.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PeerStatisticsModel
    /// </summary>
    [DataContract]
    public partial class PeerStatisticsModel :  IEquatable<PeerStatisticsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeerStatisticsModel" /> class.
        /// </summary>
        /// <param name="peerEndPoint">peerEndPoint.</param>
        /// <param name="connected">connected.</param>
        /// <param name="inbound">inbound.</param>
        /// <param name="bytesSent">bytesSent.</param>
        /// <param name="bytesReceived">bytesReceived.</param>
        /// <param name="receivedMessages">receivedMessages.</param>
        /// <param name="sentMessages">sentMessages.</param>
        /// <param name="latestEvents">latestEvents.</param>
        public PeerStatisticsModel(string peerEndPoint = default(string), bool? connected = default(bool?), bool? inbound = default(bool?), long? bytesSent = default(long?), long? bytesReceived = default(long?), int? receivedMessages = default(int?), int? sentMessages = default(int?), List<string> latestEvents = default(List<string>))
        {
            this.PeerEndPoint = peerEndPoint;
            this.Connected = connected;
            this.Inbound = inbound;
            this.BytesSent = bytesSent;
            this.BytesReceived = bytesReceived;
            this.ReceivedMessages = receivedMessages;
            this.SentMessages = sentMessages;
            this.LatestEvents = latestEvents;
        }
        
        /// <summary>
        /// Gets or Sets PeerEndPoint
        /// </summary>
        [DataMember(Name="peerEndPoint", EmitDefaultValue=false)]
        public string PeerEndPoint { get; set; }

        /// <summary>
        /// Gets or Sets Connected
        /// </summary>
        [DataMember(Name="connected", EmitDefaultValue=false)]
        public bool? Connected { get; set; }

        /// <summary>
        /// Gets or Sets Inbound
        /// </summary>
        [DataMember(Name="inbound", EmitDefaultValue=false)]
        public bool? Inbound { get; set; }

        /// <summary>
        /// Gets or Sets BytesSent
        /// </summary>
        [DataMember(Name="bytesSent", EmitDefaultValue=false)]
        public long? BytesSent { get; set; }

        /// <summary>
        /// Gets or Sets BytesReceived
        /// </summary>
        [DataMember(Name="bytesReceived", EmitDefaultValue=false)]
        public long? BytesReceived { get; set; }

        /// <summary>
        /// Gets or Sets ReceivedMessages
        /// </summary>
        [DataMember(Name="receivedMessages", EmitDefaultValue=false)]
        public int? ReceivedMessages { get; set; }

        /// <summary>
        /// Gets or Sets SentMessages
        /// </summary>
        [DataMember(Name="sentMessages", EmitDefaultValue=false)]
        public int? SentMessages { get; set; }

        /// <summary>
        /// Gets or Sets LatestEvents
        /// </summary>
        [DataMember(Name="latestEvents", EmitDefaultValue=false)]
        public List<string> LatestEvents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PeerStatisticsModel {\n");
            sb.Append("  PeerEndPoint: ").Append(PeerEndPoint).Append("\n");
            sb.Append("  Connected: ").Append(Connected).Append("\n");
            sb.Append("  Inbound: ").Append(Inbound).Append("\n");
            sb.Append("  BytesSent: ").Append(BytesSent).Append("\n");
            sb.Append("  BytesReceived: ").Append(BytesReceived).Append("\n");
            sb.Append("  ReceivedMessages: ").Append(ReceivedMessages).Append("\n");
            sb.Append("  SentMessages: ").Append(SentMessages).Append("\n");
            sb.Append("  LatestEvents: ").Append(LatestEvents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeerStatisticsModel);
        }

        /// <summary>
        /// Returns true if PeerStatisticsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PeerStatisticsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeerStatisticsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PeerEndPoint == input.PeerEndPoint ||
                    (this.PeerEndPoint != null &&
                    this.PeerEndPoint.Equals(input.PeerEndPoint))
                ) && 
                (
                    this.Connected == input.Connected ||
                    (this.Connected != null &&
                    this.Connected.Equals(input.Connected))
                ) && 
                (
                    this.Inbound == input.Inbound ||
                    (this.Inbound != null &&
                    this.Inbound.Equals(input.Inbound))
                ) && 
                (
                    this.BytesSent == input.BytesSent ||
                    (this.BytesSent != null &&
                    this.BytesSent.Equals(input.BytesSent))
                ) && 
                (
                    this.BytesReceived == input.BytesReceived ||
                    (this.BytesReceived != null &&
                    this.BytesReceived.Equals(input.BytesReceived))
                ) && 
                (
                    this.ReceivedMessages == input.ReceivedMessages ||
                    (this.ReceivedMessages != null &&
                    this.ReceivedMessages.Equals(input.ReceivedMessages))
                ) && 
                (
                    this.SentMessages == input.SentMessages ||
                    (this.SentMessages != null &&
                    this.SentMessages.Equals(input.SentMessages))
                ) && 
                (
                    this.LatestEvents == input.LatestEvents ||
                    this.LatestEvents != null &&
                    this.LatestEvents.SequenceEqual(input.LatestEvents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PeerEndPoint != null)
                    hashCode = hashCode * 59 + this.PeerEndPoint.GetHashCode();
                if (this.Connected != null)
                    hashCode = hashCode * 59 + this.Connected.GetHashCode();
                if (this.Inbound != null)
                    hashCode = hashCode * 59 + this.Inbound.GetHashCode();
                if (this.BytesSent != null)
                    hashCode = hashCode * 59 + this.BytesSent.GetHashCode();
                if (this.BytesReceived != null)
                    hashCode = hashCode * 59 + this.BytesReceived.GetHashCode();
                if (this.ReceivedMessages != null)
                    hashCode = hashCode * 59 + this.ReceivedMessages.GetHashCode();
                if (this.SentMessages != null)
                    hashCode = hashCode * 59 + this.SentMessages.GetHashCode();
                if (this.LatestEvents != null)
                    hashCode = hashCode * 59 + this.LatestEvents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
